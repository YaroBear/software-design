Please keep all files related to a homework or an assignment within the appropriate directory. Files checked in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

During pairing rotate who checks in the code. There should be somewhat (approximately) the same number of checkins from each member of a pair/team. In other words, we don't want to see check in from only one person of the pair/team.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Reasonable effort is expected from each person.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat or to the mailing list. Your last check in before the deadline will be graded. If your last check in breaks the code, both you and your pair will lose significant points.

Please feel free to ask for frequent reviews. See the reviews/readme.txt file for details on how to ask for reviews.

You can evolve the answers and solutions based on the reviews. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

Please read the academic honesty policy posted on the course mailing list.

Now to homework #1.

------------------------------------------------------------------------------
HW1: Due 11:59PM September 1

Q1. What's simple design?

Simple design is minimalistic design.  Meaning, every feature is relevant and nothing irrelevant has been added.  In general, this lack of irrelevant features allows the code to fail less, or to fail "in more graceful ways".

Q2. Why should design be simple?

Simple design makes code easier to understand, easier to maintain, easier to change, and less likely to fail.

Q3. In your experience, from what you've seen, has there been problems with design not being simple or benefits from it being simple? Give examples of situations and impact. Discuss.

Nick:

Yaro and I were in the same database course last spring.  The class had a big group project with several requirements.  We focused on the requierments early.  We thought about how we could implement them and what implementing each would accomplish for our project.  Our project was to create a database system with a front end for an organ donation network.  The requirements were that we have at least 2 triggers (2 actions automatically triggered when entering new data into the system), at least 2 different user views, a well defined database schema, and reports based on the data.  The requirements seemed a little disconnected from the main topic of "organ donation", but we kept them in mind from the beginning.  They took shape early on and we did not have to scramble at the end to make sure we'd met all of them.  I think our grade benefitted from this.  A few groups had some flashy features that werent necessary.  It seemed like when this happened more time was spent making irrelevant features than was spent focusing on nailing the requirements in order to get the highest grade.  Our project could have benefitted from a strategic to tactical design approach however.  I think had we spent more time in the beginning on the strategic design, we might have had a clearer picture of what needed work early on.  In the beginning, we ran into the issue of people needing to wait until other group members were finished with a piece of the project before being able to start something new.  This delayed and confused thinga a bit.

