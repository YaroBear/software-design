HW2: Due 11:59PM September 15

In this homework we'll create an initial strategic design for a version of the minesweeper game.

Let's first describe the version of the game that we'll design. We'll not be writing any code in this homework, but only creating an initial design.

The object of the game is for a player to find and seal all ten mines hidden  among hundred cells (10 x 10 cells). The mines may be in any random location.

There are three types of cells: mined cell, adjacent cell, and empty cell. 

A mined cell has a hidden mine.

An adjacent cell is next to one or more mined cells and knows the number of mines next to it. This number is not revealed to the player initially. 

An empty cell has no mine and is not next to a mined cell.

At the start of the game all cells are displayed grayed out, the player has no initial clue which cells are mined, adjacent, or empty. The player may either expose a cell or seal it.

The player may seal a cell if they suspect that cell to have a mine. Only an unexposed cell can be sealed. A sealed cell is shown with a seal symbol. A player may unseal a sealed cell and it will be displayed gray again.

Only an unexposed and unsealed cell can be exposed. 

The behavior of a cell when exposed depends on the type of the cell.

Exposing a mined cell ends the game.

If an empty cell is exposed, the player can see that it's empty. Furthermore, when an empty cell is exposed, it will trigger an expose action on all its unsealed neighbors.

When an adjacent cell is exposed (either due to users direct action or due 
to the successive action from exposing of a neighboring cell) it's count 
is shown and no further action happens.

There are two outcomes of the game. The player wins after sealing all the 
mines and exposing all the other cells. The player loses if a mined cell 
is exposed.

Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

1. How would you design this program? 

For our basic data structures, we decided it would be easiest to keep track of our cells using a one-dimensional JavaScript array. This poses two advantages: 1. we can scale the game to any size using JavaScript built in dynamic arrays 2. Using a one-dimensional representation of the grid simplifies the math (and lines of code). For example:

Calculating adjacent cells for a grid that has width*height number of cells:

Top: currentCell – height
Bottom: currentCell + height
Left: currentCell – 1
Right: currentCell + 1
Top Left Corner: currentCell – height – 1
Top Right Corner: currentCell – height + 1
Bottom Left Corner: currentCell + height – 1
Bottom Right Corner: currentCell + height + 1

Bounds checking, in the example case where currentCell – 1 would be considered off the left edge of the “grid”, we use % math and array bounds checking.

The main objects of our game follow a Model View Controller pattern.
Controller: GameController()
Views: GameView(), CellView()
Models: Grid(), Cell()

The GameController() calls Grid() to return a new Grid object, which acts as a container that manages Cell() objects. Grid() and Cell() make up the internal state of the game, keeping track whether a cell is exposed or sealed, and making Cell.expose(), Cell.seal(), Cell.unseal() avilable to the GameController(). When any of these methods are called, GameController() also calls GameView() to update the Canvas.

The GameView() object acts as the graphical representation of the Grid() object, managing CellView() objects that store the external state of the game. This includes xPosition, yPosition, cell size, texture, and click event listeners of each cell in the Canvas.

The 1D Grid array must be mapped to a 2D canvas, where each cell is represented as a rectangle taking parameters (xPos, yPos, width, height), so it makes sense to keep the internal state of the cell separate from what Canvas needs to draw the cells.

The Cell object has attributes: bool mined, bool sealed, bool exposed, and int adjacentMines. The boolean attributes will be used to indicate if a cell has a mine (mined = true), if a cell has been sealed (sealed = true), and if a cell has been exposed (exposed = true). The adjacentMines attribute is used to track the number of mines that are adjacent to the Cell instance.

Every CellView object starts with the default unexposed texture, and CellView.renderTexture() updates the texture when the internal state of the game has changed, i.e. Cell.expose() is called.

JavaScript allows us to extend a prototypical object to any constructor function, which provides similar functionality to subclasses in languages like Java. MinedCell, EmptyCell, and NumberedCell inherit from the Cell object using this prototypical inheritance pattern. Every Cell object has attributes: exposed and sealed, with methods expose(), seal(), and unseal(). The other Cell prototype objects override expose() from the base object.

MinedCell.expose(): GameController() calls GameController.loseGame() and Gameview() to update textures.

EmptyCell.expose(): GameController() calls Grid.exposeNeighbors() and Gameview() to update textures.

NumberedCell.expose(): GameController() just tells Gameview() to update one CellView texture.

A valid game state is where a bomb has not been clicked, and there are tiles that are yet to be exposed. An end game state is where all tiles have been revealed and only cells that are mined have been sealed. GameController.reset() can be called during a valid game state or end game state. GameController.reset() resets the GameController.timer, and the timer starts when the first click event is detected. For example: MinedCell.expose() would result in an end game state, whereas NumberedCell.expose() allows continuation of the valid game state.

The game's physical size on the screen is determined by the window.innerWidth and window.innerHeight of the browser's DOM to dynamically fit on any screen size. Each Cell size is a function of the game size and the number of cells in the game (default 10*10). Each Cell is drawn to the Canvas using CanvasRenderingContext2D.rect(xPos, yPos, width, height). The GUI will display the timer, as well as a reset button to call GameController.reset().

2. Discuss what language you would use.

We were originally considering Java, but after doing research on some GUI and even game engine platforms, we decided on using JavaScript. Modern applications are mostly web oriented these days, and now that flash and java applets are being deprecated for the web, it would make sense to build something modern. We both have experience using JavaScript in both the front and back end, and pairing this with the simple yet powerful Html5 Canvas we believe would make a great application.

3. How do you plan to structure the program, what libraries would you use?

The main objects of our game follow a Model View Controller pattern.
Controller: GameController()
Views: GameView(), CellView()
Models: Grid(), Cell()

The GameController() object will configure the GUI, add event listeners to the cells, enable the visuals of the game state (things such as time, reset, lose, and win) through GameView() and CellView(), while relying on Grid to keep track the internal state of the game including every instance of Cell and their attributes. HTML5 Canvas provides the API to render our views.