[Venkat 11/02/17 12:47 PM MDT]
synopsis: the duplication keeps on creeping up 

details:

Please see suggestions in code.

------------------------------------------------------------------------------
[Venkat 11/01/17 07:55 AM CET]
synopsis: let's refactor a bit 

details:                      

Please see suggestions in code.

------------------------------------------------------------------------------
[Venkat 10/31/17 07:44 AM CET]
synopsis: let's move forward 

details:                    

Please see suggestions in code.

Let's implement the next feature. Keep an eye for DRY and SRP.

------------------------------------------------------------------------------
[Venkat 10/30/17 05:17 AM CET]
synopsis: let's rethink about the design 

details:                                

Please see suggestions in code.

What if we had a Converter and the converter can be chained. For example

const converter = new Converter(func1).and(func2).and(func3);

For example, func1 may be LoweCaseConverter.toLowerCase                                  

Then converter.convert("some string") can return a string that has been
converted by func1 and the output converted by func2 and it's output in turn
converted by func3.

Then a writer can hold on to a converter instance, call convert within write and then use the converted output.

------------------------------------------------------------------------------
[Venkat 10/29/17 11:25 AM GMT]
synopsis: please take small steps 

details:                         

WriterUtility: Fails OCP. If we need another feature we have to open and change this.

We just started on lowercase. We have not given a chance to see how that design looks. So, no reason to run off and create uppercase, duplicate remover, etc.

Please delete anything related to uppercase, duplicate remover, and stupid remover.

Let's focus on lowercase conversion.

Let's create a LowerCaseConverter class. Let it provide conversion of a string to lowercase. Write test LowerCaseConverterTest. In this call the method of LowerCaseConverter and verify it works. Then write a test to use the LowerCaseConverter with StringWriter. Then a test to use it with FileWriter. This will help us to think about how we will use the converters with the Writers.

------------------------------------------------------------------------------
[Venkat 10/28/17 04:27 AM EDT]
synopsis: let's avoid coupling where it should not be 

details:                                             

Please see suggestions in code.

After this, please take the next small step.

------------------------------------------------------------------------------
[Venkat 10/27/17 04:47 AM EDT]
synopsis: let's honor SRP and OCP 

details:                         

The writer-test is violating SRP and OCP. It depends on two classes instead of at most one (SRP). If we decide to add another writer we have to open and change it (OCP).

We can honor DRY without violating SRP and OCP.

Let's try the following:

In writer-test.js:

const createTests = function(WriterClass) {
  describe('writer tests:', function() {
		let writer;
		
		beforeEach(() => writer = new WriterClass());
		
		it 1
		it 2
		... all using writer. No mention of StringWriter or FileWriter in this entire file.
  }); 
}    

module.exports = createTests;

Then

string-writer-test.js:

const createTests = require('writer-test');
const StringWriter = require('../string-writer');

createTests(StringWriter); //tada

------------------------------------------------------------------------------
[Venkat 10/26/17 06:38 AM EDT]
synopsis: let's use the language capabilities to make code DRY 

details:
Please, no comments in code. Do the best you can and I will point you in the right direction, if necessary, during the next review.

JavaScript is one of the most flexible languages.

We can create a function that returns stuff, just about anything.
What if we group the tests into a function that takes a object and 
runs the tests on that given object?

Experiment, play with some ideas.

------------------------------------------------------------------------------
[Venkat 10/24/17 15:43 PM MDT]
synopsis: let's honor DRY and SRP 

details:                         

Notice how the tests in StringWriter and FileWriter do the same thing, but on two different classes. Let's remove that duplication, keeping the tests DRY, without violating SRP (keeping the tests classes separate).

------------------------------------------------------------------------------
[Venkat 10/24/17 05:05 AM MDT]
synopsis: let's keep the two writes consistent 

details:                                      

Either make FileWriter's write synchronous or make StringWriter's write return a promise and turn it into asynchronous.

Make sure the tests in StringWriter and the tests in FileWriter are identical in sequence and in actions performed as well. The only difference being how we get the contents from StringWriter vs. for the FileWriter.

------------------------------------------------------------------------------
[Venkat 10/23/17 04:26 AM MDT]
synopsis: let's keep the test sequence identical

details:
Keep the sequence of tests in file-writer-test identical to the tests in string-writer-test. Let most of the body of each test be identical, only the assertion should be different. Instead of asking for contents, read a file to get the contents.

------------------------------------------------------------------------------
[Venkat 10/22/17 10:53 AM EDT]
synopsis: let's keep an eye for SPR and OCP violation 

details:
Please see suggestions in code.

After the changes, let's focus on FileWriter next.

------------------------------------------------------------------------------
[Venkat 10/21/17 14:53 PM EDT]
synopsis: build not integrated into CI 

details:
Please integrate code into CI.

------------------------------------------------------------------------------
[Venkat 10/21/17 05:22 AM CEST]
synopsis: good start 

details:
Please integrate code into CI.

Good start. Let's write a few more tests for the StringWriter.

------------------------------------------------------------------------------
